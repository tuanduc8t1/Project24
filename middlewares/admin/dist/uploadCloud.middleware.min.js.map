{"version":3,"sources":["uploadCloud.middleware.js"],"names":["cloudinary","require","v2","streamifier","config","cloud_name","CLOUDINARY_CLOUD_NAME","api_key","process","env","CLOUDINARY_API_KEY","CLOUDINARY_API_SECRET","api_secret","req","file","streamUpload","exports","uploadSingle","reject","uploader","upload_stream","upload","result","resolve","error","createReadStream","buffer","pipe","stream","regeneratorRuntime","async","_context","prev","next","awrap","sent","body","fieldname","url","stop"],"mappings":"aAAA,IAAMA,WAAaC,QAAQ,cAAcC,GACnCC,YAAcF,QAAQ,eAE5BD,WAAWI,OAAO,CAFlBC,WAAMF,QAAcF,IAAQK,sBAI1BC,QAASC,QAAQC,IAAIC,mBAFvBV,WAAWI,QAAOK,IAAAE,wBAGhBC,OAAAA,QAAYJ,aAAYG,SAAAA,EAAAA,EAAAA,GAH1B,GAAAE,EAAAC,KAAA,CAAA,IAQQC,EAAe,SAACF,GAFlB,OAACG,IAAQC,QAAAA,SAAAA,EAAeC,GACzBL,IAAIC,EAAMd,WAAAmB,SAAAC,cAiBIC,SAAAA,EAAfC,GAAAA,EAAAC,EAAAD,GAAAJ,EAAAM,KAAArB,YAAAsB,iBAAAZ,EAAAC,KAAAY,QAAAC,KAAAC,MAAsBf,EAAtBA,EAAAgB,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MAAAnB,EAAAF,IAAA,KAAA,EAAAS,EAAAS,EAAAI,KAAAtB,EAAAuB,KAAAvB,EAAAC,KAAAuB,WAAAf,EAAAgB,IAAAL,IAAA,KAAA,EAAA,IAAA,MAAA,OAAAF,EAAAQ,eAQAN,IARA,IAAsBpB,EAAtBS","file":"uploadCloud.middleware.min.js","sourcesContent":["const cloudinary = require('cloudinary').v2;\nconst streamifier = require('streamifier');\n\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET\n});\n\nmodule.exports.uploadSingle = (req, res, next) => {\n  if(req.file) {\n    let streamUpload = (req) => {\n      return new Promise((resolve, reject) => {\n        let stream = cloudinary.uploader.upload_stream(\n          (error, result) => {\n            if (result) {\n              resolve(result);\n            } else {\n              reject(error);\n            }\n          }\n        );\n\n        streamifier.createReadStream(req.file.buffer).pipe(stream);\n      });\n    };\n\n    async function upload(req) {\n      let result = await streamUpload(req);\n      req.body[req.file.fieldname] = result.url;\n      next();\n    }\n\n    upload(req);\n  } else {\n    next();\n  }\n}"]}