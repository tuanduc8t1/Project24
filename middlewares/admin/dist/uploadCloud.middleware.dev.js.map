{"version":3,"sources":["uploadCloud.middleware.js"],"names":["cloudinary","require","v2","streamifier","config","cloud_name","process","env","CLOUDINARY_CLOUD_NAME","api_key","CLOUDINARY_API_KEY","api_secret","CLOUDINARY_API_SECRET","module","exports","uploadSingle","req","res","next","file","upload","streamUpload","result","body","fieldname","url","Promise","resolve","reject","stream","uploader","upload_stream","error","createReadStream","buffer","pipe"],"mappings":";;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBC,EAAzC;;AACA,IAAMC,WAAW,GAAGF,OAAO,CAAC,aAAD,CAA3B;;AAEAD,UAAU,CAACI,MAAX,CAAkB;AAChBC,EAAAA,UAAU,EAAEC,OAAO,CAACC,GAAR,CAAYC,qBADR;AAEhBC,EAAAA,OAAO,EAAEH,OAAO,CAACC,GAAR,CAAYG,kBAFL;AAGhBC,EAAAA,UAAU,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHR,CAAlB;;AAMAC,MAAM,CAACC,OAAP,CAAeC,YAAf,GAA8B,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAChD,MAAGF,GAAG,CAACG,IAAP,EAAa;AAAA,QAiBIC,MAjBJ,GAiBX,SAAeA,MAAf,CAAsBJ,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CACqBK,YAAY,CAACL,GAAD,CADjC;;AAAA;AACMM,cAAAA,MADN;AAEEN,cAAAA,GAAG,CAACO,IAAJ,CAASP,GAAG,CAACG,IAAJ,CAASK,SAAlB,IAA+BF,MAAM,CAACG,GAAtC;AACAP,cAAAA,IAAI;;AAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjBW;;AACX,QAAIG,YAAY,GAAG,SAAfA,YAAe,CAACL,GAAD,EAAS;AAC1B,aAAO,IAAIU,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIC,MAAM,GAAG7B,UAAU,CAAC8B,QAAX,CAAoBC,aAApB,CACX,UAACC,KAAD,EAAQV,MAAR,EAAmB;AACjB,cAAIA,MAAJ,EAAY;AACVK,YAAAA,OAAO,CAACL,MAAD,CAAP;AACD,WAFD,MAEO;AACLM,YAAAA,MAAM,CAACI,KAAD,CAAN;AACD;AACF,SAPU,CAAb;AAUA7B,QAAAA,WAAW,CAAC8B,gBAAZ,CAA6BjB,GAAG,CAACG,IAAJ,CAASe,MAAtC,EAA8CC,IAA9C,CAAmDN,MAAnD;AACD,OAZM,CAAP;AAaD,KAdD;;AAsBAT,IAAAA,MAAM,CAACJ,GAAD,CAAN;AACD,GAxBD,MAwBO;AACLE,IAAAA,IAAI;AACL;AACF,CA5BD","sourcesContent":["const cloudinary = require('cloudinary').v2;\nconst streamifier = require('streamifier');\n\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET\n});\n\nmodule.exports.uploadSingle = (req, res, next) => {\n  if(req.file) {\n    let streamUpload = (req) => {\n      return new Promise((resolve, reject) => {\n        let stream = cloudinary.uploader.upload_stream(\n          (error, result) => {\n            if (result) {\n              resolve(result);\n            } else {\n              reject(error);\n            }\n          }\n        );\n\n        streamifier.createReadStream(req.file.buffer).pipe(stream);\n      });\n    };\n\n    async function upload(req) {\n      let result = await streamUpload(req);\n      req.body[req.file.fieldname] = result.url;\n      next();\n    }\n\n    upload(req);\n  } else {\n    next();\n  }\n}"],"file":"uploadCloud.middleware.dev.js"}