{"version":3,"sources":["cart.controller.js"],"names":["Cart","require","Product","module","req","res","cart","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","item","infoProduct","regeneratorRuntime","async","_context","prev","next","awrap","findOne","_id","cookies","cartId","sent","totalPrice","undefined","products","Symbol","iterator","done","value","product_id","select","priceNew","quantity","t0","finish","render","pageTitle","cartDetail","stop","exports","addPost","productId","existProductInCart","quantityUpdate","objectCart","_context2","params","parseInt","body","find","price","discountPercentage","updateOne","products.product_id","$set","products.$.quantity","$push","flash","redirect","deleteItem","_context3","$pull","updateItem","_context4"],"mappings":"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","file":"cart.controller.min.js","sourcesContent":["const Cart = require(\"../../models/cart.model\");\r\nconst Product = require(\"../../models/product.model\");\r\n\r\n// [GET] /cart/\r\nmodule.exports.index = async (req, res) => {\r\n  const cart = await Cart.findOne({\r\n    _id: req.cookies.cartId\r\n  });\r\n\r\n  cart.totalPrice = 0;\r\n\r\n  for (const item of cart.products) {\r\n    const infoProduct = await Product.findOne({\r\n      _id: item.product_id\r\n    }).select(\"thumbnail title price discountPercentage stock slug\");\r\n\r\n    infoProduct.priceNew = (infoProduct.price * (100 - infoProduct.discountPercentage)/100).toFixed(0);\r\n\r\n    infoProduct.totalPrice = infoProduct.priceNew * item.quantity;\r\n\r\n    cart.totalPrice += infoProduct.totalPrice;\r\n\r\n    item.infoProduct = infoProduct;\r\n  }\r\n\r\n  res.render(\"client/pages/cart/index\", {\r\n    pageTitle: \"Giỏ hàng\",\r\n    cartDetail: cart\r\n  });\r\n};\r\n\r\n// [POST] /cart/add/:productId\r\nmodule.exports.addPost = async (req, res) => {\r\n  const productId = req.params.productId;\r\n  const quantity = parseInt(req.body.quantity);\r\n  const cartId = req.cookies.cartId;\r\n\r\n  try {\r\n    const cart = await Cart.findOne({\r\n      _id: cartId\r\n    });\r\n\r\n    const existProductInCart = cart.products.find(item => item.product_id == productId);\r\n\r\n    if(existProductInCart) {\r\n      const quantityUpdate = existProductInCart.quantity + quantity;\r\n      \r\n      await Cart.updateOne({\r\n        _id: cartId,\r\n        \"products.product_id\": productId\r\n      }, {\r\n        $set: { \"products.$.quantity\": quantityUpdate }\r\n      });\r\n    } else {\r\n      const objectCart = {\r\n        product_id: productId,\r\n        quantity: quantity,\r\n      };\r\n  \r\n      await Cart.updateOne({\r\n        _id: cartId\r\n      }, {\r\n        $push: { products: objectCart }\r\n      });\r\n    }\r\n    req.flash(\"success\", \"Đã thêm sản phẩm vào giỏ hàng.\");\r\n  } catch (error) {\r\n    req.flash(\"error\", \"Thêm sản phẩm vào giỏ hàng không thành công!\");\r\n  }\r\n\r\n  res.redirect(\"back\");\r\n};\r\n\r\n\r\n// [GET] /cart/delete/:productId\r\nmodule.exports.deleteItem = async (req, res) => {\r\n  const productId = req.params.productId;\r\n  const cartId = req.cookies.cartId;\r\n  \r\n  await Cart.updateOne({\r\n    _id: cartId\r\n  }, {\r\n    $pull: { products: { product_id: productId } }\r\n  });\r\n\r\n  req.flash(\"success\", \"Đã xóa sản phẩm khỏi giỏ hàng!\");\r\n\r\n  res.redirect(\"back\");\r\n}\r\n\r\n// [GET] /cart/update/:productId/:quantity\r\nmodule.exports.updateItem = async (req, res) => {\r\n  const productId = req.params.productId;\r\n  const quantity = parseInt(req.params.quantity);\r\n  const cartId = req.cookies.cartId;\r\n  \r\n  await Cart.updateOne({\r\n    _id: cartId,\r\n    \"products.product_id\": productId\r\n  }, {\r\n    $set: { \"products.$.quantity\": quantity }\r\n  });\r\n\r\n  req.flash(\"success\", \"Cập nhật sản phẩm thành công!\");\r\n\r\n  res.redirect(\"back\");\r\n}"]}